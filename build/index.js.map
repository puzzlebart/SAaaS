{"version":3,"sources":["../src/index.js"],"names":["JSDOM","jsdom","process","platform","require","config","app","set","use","bodyParser","json","urlencoded","extended","getAPIS","fs","readFileSync","req","res","next","header","superSecretApiKeys","env","APIKEYS","split","doEnterpriseLevelSecurityCheck","randomize","min","max","Math","round","random","get","redirect","version","message","query","name","JSON","parse","render","post","console","log","stringify","body","apiFile","apiFileReadyForNewEntry","substring","length","writeFile","err","data","executeAPI","url","allShittyAPIs","apiName","shittyApiDefinition","filter","a","axios","then","r","dom","document","window","selectors","allTheThings","querySelectorAll","allTheShittyEntries","map","e","entry","textContent","trim","EnterpriseLevelSecurityCheck","Promise","resolve","reject","indexOf","headers","apikey","error","includes","capitalize","s","charAt","toUpperCase","slice","status","end","allShittyApiNames","matches","listen","PORT"],"mappings":"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","sourcesContent":["import bodyParser from \"body-parser\";\nimport fs from \"fs\";\nimport \"@babel/polyfill\";\nimport express from 'express'; // framework, yo\n// import cheerio from 'cheerio'; // IM TRYING JSOM MOM\nimport jsdom from \"jsdom\";\nconst { JSDOM } = jsdom;\n\nimport axios from \"axios\";\nif (process.platform === \"darwin\") { require(\"dotenv\").config() } // enterprise-grade MacOS-detection\nconst app = express() // express app instance\napp.set('view engine', 'ejs')\napp.use(bodyParser.json());       // to support JSON-encoded bodies\napp.use(bodyParser.urlencoded({ extended: true }));  // to support URL-encoded bodies \n// app.use(express.static(__dirname + '/public')); // because paths is a PITA\n// app.use(express.static(\"public\")); // because paths is a PITA\n// @ts-ignore\n// const APIS = JSON.parse(fs.readFileSync(\"./build/apis.json\", \"utf8\"))\nconst getAPIS = () => (fs.readFileSync(\"./build/apis.json\", \"utf8\"))\n\n\n\n\n//CORS\napp.use(function (req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    // Remember to have apikey here, else our enterprise-grade authorization-system will fail\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Content-Length, Cache-Control, Accept, apikey\");\n    next();\n});\n\n\n// MICKEY MOUSE ENTERPRISE-GRADE SECURITY AS A SERVICE\nconst superSecretApiKeys = process.env.APIKEYS.split(\",\")\nconst doEnterpriseLevelSecurityCheck = true;\n// ENTERPRISE GRADE RANDOMIZATION ENGINE\nconst randomize = (min, max) => Math.round((Math.random() * (max - min) + min))\n\napp.get('/tihi', (req, res) => { res.redirect(\"https://www.youtube.com/watch?v=-Lez_WdX7Oc\") })// TIHIaaS -  Thanks, I hate it as a Service\napp.get(\"/version\", (req, res) => { res.json({ version: \"1.0.0\" }) })// version\napp.get('/doh', (req, res) => { res.json({ message: \"D'oh!\" }) }) // DaaS - DÂ´oh! as a Service\n\n\n// GET a named API by title or whatever\napp.get('/get', (req, res) => {\n    if (!req.query.name) { res.json(JSON.parse(getAPIS())) } // yeah so no query, you get all, you fool! use /LIST\n}) // D'oh!\n\n\n\n// list all created apis\napp.get(\"/list\", (req, res) => res.json(JSON.parse(getAPIS())))\napp.get(\"/success\", (req, res) => res.render(\"success\")) // newform\napp.get([\"/new\", \"/create\"], (req, res) => res.render(\"new\")) // newform\n// postbacks go here. it's so damn secure\napp.post([\"/new\", \"/create\"], (req, res) => {\n    console.log(JSON.stringify(req.body))\n    let apiFile = fs.readFileSync(\"./build/apis.json\", \"utf8\")\n    let apiFileReadyForNewEntry = apiFile.substring(0, apiFile.length - 1)\n    fs.writeFile(\"./build/apis.json\", `\\n${apiFileReadyForNewEntry},\\n${JSON.stringify(req.body)}]`, ((err, data) => { // ITS FUCKING GLORIOUS\n        if (err) {\n            res.render(\"error\")\n        } else {\n            res.render(\"success\");\n        }\n    }))\n})\n\n\n\n//Do lol stuff here with cheerio\nasync function executeAPI(req, res) {\n    console.log(`----------- EXECUTEAPI ${req.url.substring(1)} -----------`)\n    let allShittyAPIs = JSON.parse(getAPIS());\n    let apiName = req.url.substring(1);\n    // if (apiName.indexOf(\"?\")) { apiName = apiName.substring(0, apiName.indexOf(\"?\")) } // HAHAHA SO BAD\n    console.log(`api definitions: ${JSON.stringify(allShittyAPIs)}`)\n    let shittyApiDefinition = allShittyAPIs.filter((a) =>{\n        console.log(`testing ${a.name} equal to ${apiName}`)\n         return a.name == apiName})[0]; // we already know it exists 'cause we checked right\n    console.log(`Found an api definition: ${JSON.stringify(shittyApiDefinition)}`)\n    if (!shittyApiDefinition) {\n        console.log(\"no shitty api definition...\")\n        res.render(\"error\")\n    }\n    console.log(`THIS IS THE SHITTY API DEFINITION T.I.H.I.`)\n    console.log(JSON.stringify(shittyApiDefinition))\n    const url = shittyApiDefinition.url;\n    axios.get(url).then(r => {\n        const data = r.data\n        const dom = new JSDOM(data)\n        let document = dom.window.document; // ah it's so familiar\n\n        // ----------------- THIS IS WHERE ALL THE SHITTY MAGIC HAPPENS ---------------------------------------------------\n\n        console.log(`SELECTORS: ${shittyApiDefinition.selectors}`)\n        let allTheThings = document.querySelectorAll(shittyApiDefinition.selectors);\n        if (allTheThings.length) {\n            let allTheShittyEntries = [...allTheThings].map(e => { return { entry: e.textContent.trim() } })\n            // console.log(allTheShittyEntries)\n            res.json(allTheShittyEntries)\n        } else {\n            res.json({ message: \"no entries in your shitty api\" })\n        }\n    })\n}\n\n// ENTERPRISE LEVEL SECURITY ENGINE AUTOMATRON - DO NOT TOUCH IT'S PERFECT THANKS\nfunction EnterpriseLevelSecurityCheck(req, res) {\n    return new Promise((resolve, reject) => {\n        if (!doEnterpriseLevelSecurityCheck || req.get('host').indexOf(\"localhost\") > -1) { resolve(true); return; }\n        if (!req.headers.apikey && !req.query.apikey) {\n            res.json({ error: `NO API KEY SPECIFIED. ASK PUZZLEBART FOR ONE! We're all about sharing :D` })\n            resolve(false)\n        } else {\n            if (superSecretApiKeys.includes(req.headers.apikey) || superSecretApiKeys.includes(req.query.apikey)) { resolve(true) } else {\n                res.json({ error: `WRONG API KEY SPECIFIED - ARE YOU HACKING???!` })\n                resolve(false)\n            }\n        }\n    })\n}\n// END SECURITIFICATION\n\n\n// Stupid sexy jslint\nconst capitalize = (s) => { if (typeof s !== 'string') return ''; return s.charAt(0).toUpperCase() + s.slice(1) }\n\n// NOT IMPLEMENTED\napp.get(\"/501\", (req, res) => { res.status(501); res.render(\"error\") })\n\n// FRONT PAGE\napp.get('/', (req, res) => { res.render(\"index\") });\n\napp.get(\"/favicon.ico\", (req, res) => {\n    res.end()\n})\n\n// error route\napp.get('(/*)?', (req, res) => {\n    let allShittyApiNames = JSON.parse(getAPIS()).map(a => `${a.name}`)\n    let apiName = req.url.substring(1).trim();\n    console.log(`TESTING FOR: ${apiName}`)\n    console.log(`AVAILABLE APIS: ${allShittyApiNames}`)\n    if (apiName.indexOf(\"?\") > -1) { apiName = apiName.substring(0, apiName.indexOf(\"?\")) }\n    let matches = allShittyApiNames.filter(a => a.name == apiName);\n    if (matches) { executeAPI(req, res) } else {\n        console.log(`no match for ${apiName}`)\n        res.render(`error`)\n    }\n}) // D'oh!\n\napp.listen(process.env.PORT || '3000', () => console.log(`running on port ${process.env.PORT || '3000'}`))"],"file":"index.js"}